from datetime import datetime, timedelta
import calendar
import pandas as pd
import random

# Function to load events from a CSV file using pandas
def load_events_from_csv(file_path):
    try:
        df = pd.read_csv(file_path)
        # Convert date string to datetime and value to int
        events = {(datetime.strptime(date, '%m/%d/%y')): int(value) for date, value in zip(df['Date'], df['Value'])}
        return events
    except Exception as e:
        print(f"Error loading CSV: {e}")
        return {}

# Update filepath here and remove commenting 
# scheduled_events = load_events_from_csv('scheduled events.csv')

# Random number generator for example purposes
# Function to generate random events for a specified period
def generate_random_events(start_date, num_months):
    scheduled_events = {}
    current_date = start_date
    
    for _ in range(num_months):
        days_in_month = calendar.monthrange(current_date.year, current_date.month)[1]
        for day in range(1, days_in_month + 1):
            date = current_date.replace(day=day)
            # Randomly decide if there's an event and what its value is
            if random.random() < 0.3:  # 30% chance of an event
                # Generate a random integer between -500 and 500 for event value
                event_value = random.randint(-500, 500)
                scheduled_events[date] = event_value
        # Move to the next month
        current_date = current_date.replace(day=1) + timedelta(days=32)
    
    return scheduled_events

# Generate random events for 3 months
scheduled_events = generate_random_events(start_date, 3)


### Remaining meat of the forecaster
# Using pandas to organize events into running balance of events
df = pd.DataFrame.from_dict(scheduled_events, orient='index', columns=['Value']).sort_index().reset_index()
events = pd.DataFrame({
    'Date': df['index'],
    'Value': df['Value'].cumsum()
})

# Start date for the first calendar
start_date = datetime(2025, 2, 1)

# Function to generate HTML for a single month
def generate_month_html(year, month, events):
    cal = calendar.Calendar(calendar.SUNDAY)
    
    html = f"""
    <div class="month">
        <h2>{calendar.month_name[month]} {year}</h2>
        <table>
            <tr>
                {"".join([f'<th>{calendar.day_abbr[i]}</th>' for i in range(7)])}
            </tr>
            {generate_calendar_body(cal, year, month, events)}
        </table>
    </div>
    """
    return html

def generate_calendar_body(cal, year, month, events):
    html = ""
    for week in cal.monthdayscalendar(year, month):
        html += "<tr>"
        for day in week:
            if day == 0:
                html += "<td></td>"
            else:
                date = datetime(year, month, day)
                # Find the event value for this date, or use 0 if not found
                event_value = events[events['Date'] == date]['Value'].iloc[0] if any(events['Date'] == date) else 0
                formatted_event_value = '' if event_value == 0 else event_value
                # Determine the cell class based on the event value
                cell_class = "negative-event" if event_value < 0 else ("has-events" if event_value > 0 else "")
                html += f"""
                <td class="{cell_class}">
                    <div>{day}</div>
                    <div>{formatted_event_value}</div>
                </td>
                """
        html += "</tr>"
    return html

# Generate HTML for three months
html_content = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Three Months Calendar with Cumulative Events</title>
    <style>
        table {
            border-collapse: collapse;
            width: 100%;
        }
        th, td {
            border: 1px solid black;
            text-align: center;
            padding: 8px;
        }
        th {
            background-color: #f2f2f2;
        }
        .has-events {
            background-color: #e6f3ff;
        }
        .negative-event {
            background-color: #ffe5e5;  /* Light red background */
        }
        .month {
            margin-bottom: 30px;
        }
    </style>
</head>
<body>
"""

current_date = start_date
for _ in range(3):  # Loop for three months
    # Generate and append HTML for this month
    html_content += generate_month_html(current_date.year, current_date.month, events)
    
    # Move to the next month
    current_date = current_date.replace(day=1) + timedelta(days=32)  # Add 32 days to get to the first of the next month

html_content += """
</body>
</html>
"""

# Write the combined HTML to a file
with open('Three month projected outlook.html', 'w') as f:
    f.write(html_content)

print("HTML file 'Three month projected outlook.html' has been created.")