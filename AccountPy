import pandas as pd
import numpy as np
import re
from datetime import datetime
# may need to pip install Jinja2 if pandas styler import errors

ledger = pd.read_csv('Sample ledger.csv')


ledger['Date'] = pd.to_datetime(ledger['Date']) #format date
ledger['Month'] = ledger['Date'].dt.to_period('M') #needed for monthly reports

def cdadj(row): #debits increase cash, decrease liabilities and equity.
    if row['Type'] == 'Asset':
        if row['Effect'] == 'CREDIT':
            return -abs(row['Amount'])
        else:
            return row['Amount']
    else:
        if row['Effect'] == 'DEBIT':
            return -abs(row['Amount'])
        else:
            return row['Amount']
ledger['New Amount'] = ledger.apply(cdadj, axis = 1) #applying updated values for reports

category_map = {} #identifying categories for mapping
category_map['Asset'] = sorted(list(set(ledger[ledger['Type'] == 'Asset']['Account'].tolist()))) #not used 11/14/24
category_map['Liability'] = sorted(list(set(ledger[ledger['Type'] == 'Liability']['Account'].tolist()))) #not used 11/14/24
category_map['Equity'] = sorted(list(set(ledger[ledger['Type'] == 'Equity']['Account'].tolist()))) #used for balance sheet and income statement

pattern = re.compile(r'^(?!.*Revenue)(?!.*Expense).*$')
non_income_labels =[s for s in category_map['Equity'] if pattern.match(s)] #used for balance sheet and income statement

def monthly_pivot_cum(df):
    df1 = df.sort_values(['Account', 'Month'])
    df2 = df1.groupby(['Account', 'Month'])['New Amount'].sum().groupby(level=0).cumsum().reset_index().dropna()
    df3 = df2.pivot(index= 'Account', columns= 'Month', values= 'New Amount').fillna('')
    return df3
def monthly_pivot_sum(df): 
    df1 = df.groupby(['Account', 'Month'])['New Amount'].sum().reset_index()
    df2 = df1.pivot(index= 'Account', columns= 'Month', values= 'New Amount').fillna('')
    return df2
def monthly_sort(df):
    df1 = df.sort_values(['Account', 'Month'])
    return df1
def monthly_pivot(df):
    df1 = df.pivot_table(columns = 'Month', values = 'New Amount')
    return df1

# reserved for boring style
def style(df):
    df_styled = (df.style
    .set_properties(**{
        'text-align': 'right',
        'font-family': 'Helvetica, Arial, sans-serif',
        'font-size': '14px',
        'padding': '10px'
    })
    .format(precision= 0, thousands= ',')
    .set_table_styles([
        # General table styles
        {'selector': '', 'props': [
            ('border-collapse', 'collapse'), 
            ('width', '100%'),
            ('border', '1px solid #ccc')
        ]},
        # Header styles
        {'selector': 'th', 'props': [
            ('background-color', '#f0f0f0'),  # Light grey background for headers
            ('color', '#333'),  # Dark grey text for headers
            ('font-weight', 'bold'),
            ('border-bottom', '2px solid #999'),  # Darker line under headers
            ('text-align', 'right')
        ]},
        # Data cell styles
        {'selector': 'td', 'props': [
            ('border', '1px dotted #ccc') # Subtle dotted borders around cells
        ]},
    ])
)
    return df_styled

# monthly balance sheet
asset_items = ledger[ledger['Type'] == 'Asset']
asset_items = asset_items.sort_values('Date')
asset_items['Asset Cumulative Sum'] = asset_items['New Amount'].cumsum()
bs_total_monthly_assets = asset_items.groupby('Month')['Asset Cumulative Sum'].last().reset_index()
bs_total_monthly_assets = bs_total_monthly_assets.pivot_table(columns= 'Month', values= 'Asset Cumulative Sum')
bs_total_monthly_assets.index = ['Total Assets']

liability_items = ledger[ledger['Type'] == 'Liability']
liability_items = liability_items.sort_values('Date')
liability_items['Liability Cumulative Sum'] = liability_items['New Amount'].cumsum()
bs_total_monthly_liabilities = liability_items.groupby('Month')['Liability Cumulative Sum'].last().reset_index()
bs_total_monthly_liabilities = bs_total_monthly_liabilities.pivot_table(columns= 'Month', values= 'Liability Cumulative Sum')
bs_total_monthly_liabilities.index = ['Total Liabilities']

#to do: def function to iterate, group and prepare pivot to display cumulative sums of accounts by month

income_items = ledger[(ledger['Type'] == 'Equity') & (~ledger['Account'].isin(non_income_labels))]
bs_monthly_non_income_items = monthly_pivot_cum(ledger[(ledger['Type'] == 'Equity') & (ledger['Account'].isin(non_income_labels))])
net_monthly_income = monthly_pivot(income_items.groupby('Month')['New Amount'].sum().reset_index())
net_monthly_income.index = ['Net Income (Loss)']
bs_monthly_equities = pd.concat([net_monthly_income, bs_monthly_non_income_items], axis=0)

equity_items = ledger[ledger['Type'] == 'Equity']
equity_items = equity_items.sort_values('Date')
equity_items['Equity Cumulative Sum'] = equity_items['New Amount'].cumsum()
bs_total_monthly_equities = equity_items.groupby('Month')['Equity Cumulative Sum'].last().reset_index()
bs_total_monthly_equities = bs_total_monthly_equities.pivot_table(columns= 'Month', values= 'Equity Cumulative Sum')
bs_total_monthly_equities.index = ['Total Equity']

bs_monthly = pd.concat([
    monthly_pivot_cum(asset_items),
    bs_total_monthly_assets,
    monthly_pivot_cum(liability_items),
    bs_total_monthly_liabilities,
    bs_monthly_equities,
    bs_total_monthly_equities],
    keys= ['Assets', '', 'Liabilities', '', 'Equities', '']
)
bs_monthly = bs_monthly.sort_index(axis=1).fillna('')
today = datetime.today().strftime('%Y%m%d_%H%M%S')
output_file_monthly_balance_sheet = f'Monthly Balance Sheet {today}.html'
style(bs_monthly).to_html(output_file_monthly_balance_sheet)

# monthly income statement

revenue_items = ledger[(ledger['Account'].str.contains('Revenue', case=False))]
revenue_items['Account'] = revenue_items['Account'].str.replace('Revenue', '', regex=False)
total_monthly_revenue = monthly_pivot(revenue_items.groupby('Month')['New Amount'].sum().reset_index())
total_monthly_revenue.index = ['Total Revenue']

expense_items = ledger[(ledger['Account'].str.contains('Expense', case=False))]
expense_items['Account'] = expense_items['Account'].str.replace('Expense', '', regex=False)
expense_items['New Amount'] = expense_items['New Amount'].abs()
total_monthly_expense = monthly_pivot(expense_items.groupby('Month')['New Amount'].sum().reset_index())
total_monthly_expense.index = ['Total Expense']

monthly_income_statement = pd.concat([
    monthly_pivot_sum(monthly_sort(revenue_items)),
    monthly_pivot_sum(monthly_sort(expense_items)),
    total_monthly_revenue,
    total_monthly_expense,
    net_monthly_income],
    keys= ['Revenues', 'Expenses', '', '', '']
)
monthly_income_statement = monthly_income_statement.sort_index(axis=1).fillna('')
output_file_monthly_income_statement = f'Monthly Income Statement {today}.html'
style(monthly_income_statement).to_html(output_file_monthly_income_statement)